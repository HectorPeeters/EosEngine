#version 430 core

layout(binding = 0, rgba32f) uniform image2D framebufferImage;

uniform vec3 eye, ray00, ray01, ray10, ray11;
uniform float time;

#define LARGE_FLOAT 1E+10
#define NUM_SPHERES 2
#define EPSILON 0.0001

struct sphere {
    vec3 pos;
    float radius;
};

const sphere spheres[NUM_SPHERES] = {
{ vec3(0, 8, 10), 2 },
{ vec3(4, 8, 15), 3 },
};

struct hitinfo {
    float distance;
    vec3 position;
    vec3 normal;
    sphere object;
};


bool intersectSphere(vec3 origin, vec3 dir, const sphere s, out hitinfo info) {
    vec3 oc = origin - s.pos;
    float a = dot(dir, dir);
    float b = 2.0 * dot(oc, dir);
    float c = dot(oc, oc) - s.radius * s.radius;
    float disc = b * b - 4 * a * c;

    if (disc < 0.0) {
        return false;
    } else {
        info.distance = (-b - sqrt(disc)) / (2.0 * a);
        info.position = origin + dir * info.distance;
        info.normal = normalize(info.position - s.pos);
        info.object = s;
        return true;
    }
}

bool intersectSpheres(vec3 origin, vec3 dir, out hitinfo info) {
    float smallest = LARGE_FLOAT;
    bool found = false;

    for (int i = 0; i < NUM_SPHERES; i++) {

        hitinfo hinfo;
        bool hit = intersectSphere(origin, dir, spheres[i], hinfo);

        if (!hit)
        continue;

        if (hinfo.distance < smallest) {
            info.distance = hinfo.distance;
            info.normal = hinfo.normal;
            info.object = hinfo.object;
            info.position = hinfo.position;

            smallest = hinfo.distance;
            found = true;
        }
    }

    return found;
}

vec3 trace(vec3 origin, vec3 dir) {
    hitinfo hinfo;

    if (!intersectSpheres(origin, dir, hinfo))
    return vec3(0.0);

    vec3 toLight = normalize(hinfo.position - vec3(0, 10, 0));
    float brightness = max(0.1, dot(hinfo.normal, toLight));

    //    hitinfo shadowInfo;
    //    if (intersectSpheres(hinfo.position + toLight * EPSILON, -toLight, shadowInfo))
    //        return vec3(0.1);

    return vec3(brightness);
}

layout (local_size_x = 16, local_size_y = 16) in;

void main(void) {
    ivec2 px = ivec2(gl_GlobalInvocationID.xy);

    ivec2 size = imageSize(framebufferImage);

    if (any(greaterThanEqual(px, size)))
    return;

    vec2 p = (vec2(px) + vec2(0.5)) / vec2(size);

    vec3 dir = mix(mix(ray00, ray01, p.y), mix(ray10, ray11, p.y), p.x);

    vec3 newEye = vec3(sin(time), eye.y, eye.z);

    vec3 color = trace(newEye, normalize(dir));

    imageStore(framebufferImage, px, vec4(color, 1.0));
}
