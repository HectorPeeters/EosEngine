#version 430 core

layout (local_size_x = 16, local_size_y = 16) in;

layout(binding = 0, rgba32f) uniform image2D framebufferImage;

uniform vec3 eye, ray00, ray01, ray10, ray11;

#define LARGE_FLOAT 1E+10
#define EPSILON 0.0001

struct hit_record {
    bool hit;

    vec3 p;
    vec3 normal;

    float t;
};

struct ray {
    vec3 origin;
    vec3 direction;
};

struct sphere {
    vec3 center;
    float radius;
};

vec3 point_at_parameter(ray r, float t) {
    return r.origin + r.direction * t;
}

vec2 rand_seed = vec2(0, 0);

float rand()
{
    rand_seed += vec2(rand_seed.x * 24 + 1, rand_seed / 2 - 123);
    return fract(sin(dot(rand_seed, vec2(12.9898, 78.233))) * 43758.5453);
}

vec3 rand_unit_sphere() {
    vec3 p;
    do {
        p = 2.0 * vec3(rand(), rand(), rand()) - vec3(1, 1, 1);
    } while (dot(p, p) >= 1);
    return p;
}

hit_record hit_sphere(sphere sphere, float t_min, float t_max, ray r) {
    vec3 oc = r.origin - sphere.center;
    float a = dot(r.direction, r.direction);
    float b = 2.0 * dot(oc, r.direction);
    float c = dot(oc, oc) - sphere.radius * sphere.radius;
    float discriminant = b * b - 4 * a * c;

    hit_record rec;

    if (discriminant > 0.0) {
        float temp = (-b - sqrt(b * b - a * c)) / a;
        if (temp < t_max && temp > t_min) {
            rec.t = temp;
            rec.p = point_at_parameter(r, temp);
            rec.normal = (rec.p - sphere.center) / sphere.radius;
            rec.hit = true;
            return rec;
        }
        temp = (-b + sqrt(b * b - a * c)) / a;
        if (temp < t_max && temp > t_min) {
            rec.t = temp;
            rec.p = point_at_parameter(r, temp);
            rec.normal = (rec.p - sphere.center) / sphere.radius;
            rec.hit = true;
            return rec;
        }
    }

    rec.hit = false;
    return rec;
}

hit_record closest_hit(ray r, sphere s[2]) {
    hit_record temp;
    float closest = LARGE_FLOAT;
    bool hit = false;

    for (int i = 0; i < 2; i++) {
        hit_record h = hit_sphere(s[i], 0, closest, r);
        if (h.hit) {
            hit = true;
            closest = h.t;
            temp = h;
        }
    }

    return temp;
}

vec3 color(ray r, sphere s[2]) {
    vec3 color = vec3(0);
    float frac = 1.0;

    for (int bounce = 0; bounce < 3; bounce++) {
        hit_record temp = closest_hit(r, s);

        if (!temp.hit) {
            break;
        }

        vec3 c = vec3(1, 1, 1);
        color += c * 0.5 * frac;
        frac *= 0.5;

        if (frac <= 0.02)
        break;
        //        r.origin = hit_record.origin;
        vec3 target = temp.p + temp.normal + rand_unit_sphere();
        r.direction = target - r.origin;
    }

    return color;

}

const vec3 lower_left = vec3(-2, -1, -1);
const vec3 horizontal = vec3(4, 0, 0);
const vec3 vertical = vec3(0, 2, 0);
const vec3 origin = vec3(0, 0, 0);

vec3 get_ray_dir(vec2 uv) {
    return lower_left + uv.x * horizontal + uv.y * vertical;
}

void main(void) {
    ivec2 px = ivec2(gl_GlobalInvocationID.xy);

    ivec2 size = imageSize(framebufferImage);

    if (any(greaterThanEqual(px, size))) {
        return;
    }

    vec2 uv = vec2(px) / vec2(size);

    //    vec3 dir = normalize(mix(mix(ray00, ray01, uv.y), mix(ray10, ray11, uv.y), uv.x));


    ray r;
    r.origin = origin;

    sphere spheres[2];
    spheres[0].center = vec3(0, 0, -1);
    spheres[0].radius = 0.5;
    spheres[1].center = vec3(0, -100.5, -1);
    spheres[1].radius = 100;

    vec3 col = vec3(0, 0, 0);

    for (int s = 0; s < 10; s++) {
        float u = float(px.x + rand()) / float(size.x);
        float v = float(px.y + rand()) / float(size.y);

        r.direction = get_ray_dir(vec2(u, v));

        col += color(r, spheres);
    }

    vec3 c = col / 10.0;

    imageStore(framebufferImage, px, vec4(c, 1.0));
}
